{"version":3,"sources":["webpack:///./common/static/xmodule/descriptors/js/001-091f58dd32678373423e4deae364e9dd.js","webpack:///external \"jQuery\"?0cb8************************","webpack:///external \"_\"?b3b9**********************"],"names":["hasPropsHelper","hasOwnProperty","extendsHelper","child","parent","key","call","ctor","constructor","prototype","__super__","MarkdownEditingDescriptor","_super","multipleChoiceTemplate","gettext","checkboxChoiceTemplate","stringInputTemplate","numberInputTemplate","selectTemplate","headerTemplate","explanationTemplate","element","that","toggleCheatsheetVisibility","apply","arguments","toggleCheatsheet","onToolbarButton","onShowXMLButton","$","length","markdown_editor","CodeMirror","fromTextArea","lineWrapping","mode","setCurrentEditor","on","find","hide","createXMLEditor","text","xml_editor","lineNumbers","setValue","getWrapperElement","toggleClass","refresh","e","preventDefault","cheatsheet","hasClass","confirmConversionToXml","markdownToXml","getValue","setCursor","confirm","revisedSelection","selection","getSelection","currentTarget","attr","insertMultipleChoice","insertStringInput","insertNumberInput","insertCheckboxChoice","insertSelect","insertHeader","insertExplanation","replaceSelection","focus","html","append","setTimeout","editor","current_editor","show","save","off","changeEditor","data","metadata","markdown","nullout","selectedText","insertGenericChoice","choiceStart","choiceEnd","template","cleanSelectedText","line","lines","revisedLines","i","len","replace","split","test","insertGenericInput","lineStart","lineEnd","demandHintTags","finalDemandHints","finalXml","responseTypesMarkdown","responseTypesXML","toXml","partialMarkdown","xml","splits","makeParagraph","serializer","responseType","$xml","responseTypesSelector","inputtype","beforeInputtype","extractHint","demandhints","responseTypes","match","questionText","result","label","inner","options","exec","trim","inputText","detectParens","curly","hint","parens","labelassign","labelmatch","substring","nothint","group1","textHint","optiontag","correct","optionlines","correctstr","hintstr","indexOf","choices","shuffle","value","inparens","fixed","groupString","abhint","endHints","hintbody","select","hints","p","answersList","isRangeToleranceCase","answer","_","contains","getAnswerData","answerValue","answerData","answerParams","default","processNumericalResponse","answerValues","firstAnswer","numericalResponseString","additionalAnswerString","hintLine","additionalTextHint","additionalHintLine","orMatch","hasTolerance","isNaN","parseFloat","processStringResponse","values","typ","string","notMatch","shift","slice","p1","join","push","parseXML","firstElementChild","each","children","nodeName","insertBefore","appendChild","XMLSerializer","serializeToString","responseTypeMarkdown","XModule","Descriptor","window"],"mappings":"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","file":"CapaDescriptor.js","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n/* global CodeMirror, _, XModule */\n// no-useless-escape disabled because of warnings in regexp expressions within the\n// \"toXML\" code. When the \"useless escapes\" were removed, some of the unit tests\n// failed, but only in Jenkins, indicating browser-specific behavior.\n/* eslint no-useless-escape: 0 */\n\n(function() {\n    'use strict';\n    var hasPropsHelper = {}.hasOwnProperty,\n        extendsHelper = function(child, parent) {\n            // This helper method was generated by CoffeeScript. Suppressing eslint warnings.\n            var key;\n            for (key in parent) { // eslint-disable-line no-restricted-syntax\n                if (hasPropsHelper.call(parent, key)) {\n                    child[key] = parent[key]; // eslint-disable-line no-param-reassign\n                }\n            }\n            function ctor() {\n                this.constructor = child;\n            }\n\n            ctor.prototype = parent.prototype;\n            child.prototype = new ctor(); // eslint-disable-line no-param-reassign\n            child.__super__ = parent.prototype; // eslint-disable-line no-param-reassign, no-underscore-dangle\n            return child;\n        };\n\n    this.MarkdownEditingDescriptor = (function(_super) {\n        // The style of these declarations come from CoffeeScript. Rather than rewriting them,\n        // the eslint warnings are being suppressed.\n        extendsHelper(MarkdownEditingDescriptor, _super); // eslint-disable-line no-use-before-define\n\n        MarkdownEditingDescriptor.multipleChoiceTemplate = '( ) ' + // eslint-disable-line no-use-before-define\n            (gettext('incorrect')) + '\\n( ) ' + (gettext('incorrect')) + '\\n(x) ' + (gettext('correct')) + '\\n';\n\n        MarkdownEditingDescriptor.checkboxChoiceTemplate = '[x] ' + // eslint-disable-line no-use-before-define\n            (gettext('correct')) + '\\n[ ] incorrect\\n[x] correct\\n';\n\n        MarkdownEditingDescriptor.stringInputTemplate = '= ' + // eslint-disable-line no-use-before-define\n            (gettext('answer')) + '\\n';\n\n        MarkdownEditingDescriptor.numberInputTemplate = '= ' +  // eslint-disable-line no-use-before-define\n            (gettext('answer')) + ' +- 0.001%\\n';\n\n        MarkdownEditingDescriptor.selectTemplate = '[[' + // eslint-disable-line no-use-before-define\n            (gettext('incorrect')) + ', (' + (gettext('correct')) + '), ' + (gettext('incorrect')) + ']]\\n';\n\n        MarkdownEditingDescriptor.headerTemplate = '' + // eslint-disable-line no-use-before-define\n            (gettext('Header')) + '\\n=====\\n';\n\n        MarkdownEditingDescriptor.explanationTemplate = '[explanation]\\n' + // eslint-disable-line no-use-before-define\n            (gettext('Short explanation')) + '\\n[explanation]\\n';\n\n        function MarkdownEditingDescriptor(element) {\n            var that = this;\n            this.toggleCheatsheetVisibility = function() {\n                return MarkdownEditingDescriptor.prototype.toggleCheatsheetVisibility.apply(that, arguments);\n            };\n            this.toggleCheatsheet = function() {\n                return MarkdownEditingDescriptor.prototype.toggleCheatsheet.apply(that, arguments);\n            };\n            this.onToolbarButton = function() {\n                return MarkdownEditingDescriptor.prototype.onToolbarButton.apply(that, arguments);\n            };\n            this.onShowXMLButton = function() {\n                return MarkdownEditingDescriptor.prototype.onShowXMLButton.apply(that, arguments);\n            };\n            this.element = element;\n            if ($('.markdown-box', this.element).length !== 0) {\n                this.markdown_editor = CodeMirror.fromTextArea($('.markdown-box', element)[0], {\n                    lineWrapping: true,\n                    mode: null\n                });\n                this.setCurrentEditor(this.markdown_editor);\n                // Add listeners for toolbar buttons (only present for markdown editor)\n                this.element.on('click', '.xml-tab', this.onShowXMLButton);\n                this.element.on('click', '.format-buttons button', this.onToolbarButton);\n                this.element.on('click', '.cheatsheet-toggle', this.toggleCheatsheet);\n                // Hide the XML text area\n                $(this.element.find('.xml-box')).hide();\n            } else {\n                this.createXMLEditor();\n            }\n        }\n\n        /*\n         Creates the XML Editor and sets it as the current editor. If text is passed in,\n         it will replace the text present in the HTML template.\n\n         text: optional argument to override the text passed in via the HTML template\n         */\n        MarkdownEditingDescriptor.prototype.createXMLEditor = function(text) {\n            this.xml_editor = CodeMirror.fromTextArea($('.xml-box', this.element)[0], {\n                mode: 'xml',\n                lineNumbers: true,\n                lineWrapping: true\n            });\n            if (text) {\n                this.xml_editor.setValue(text);\n            }\n            this.setCurrentEditor(this.xml_editor);\n            $(this.xml_editor.getWrapperElement()).toggleClass('CodeMirror-advanced');\n            // Need to refresh to get line numbers to display properly.\n            this.xml_editor.refresh();\n        };\n\n        /*\n         User has clicked to show the XML editor. Before XML editor is swapped in,\n         the user will need to confirm the one-way conversion.\n         */\n        MarkdownEditingDescriptor.prototype.onShowXMLButton = function(e) {\n            e.preventDefault();\n            if (this.cheatsheet && this.cheatsheet.hasClass('shown')) {\n                this.cheatsheet.toggleClass('shown');\n                this.toggleCheatsheetVisibility();\n            }\n            if (this.confirmConversionToXml()) {\n                this.createXMLEditor(MarkdownEditingDescriptor.markdownToXml(this.markdown_editor.getValue()));\n                this.xml_editor.setCursor(0);\n                // Hide markdown-specific toolbar buttons\n                $(this.element.find('.editor-bar')).hide();\n            }\n        };\n\n        /*\n         Have the user confirm the one-way conversion to XML.\n         Returns true if the user clicked OK, else false.\n         */\n        MarkdownEditingDescriptor.prototype.confirmConversionToXml = function() {\n            return confirm(gettext('If you use the Advanced Editor, this problem will be converted to XML and you will not be able to return to the Simple Editor Interface.\\n\\nProceed to the Advanced Editor and convert this problem to XML?')); // eslint-disable-line max-len, no-alert\n        };\n\n        /*\n         Event listener for toolbar buttons (only possible when markdown editor is visible).\n         */\n        MarkdownEditingDescriptor.prototype.onToolbarButton = function(e) {\n            var revisedSelection, selection;\n            e.preventDefault();\n            selection = this.markdown_editor.getSelection();\n            revisedSelection = null;\n            switch ($(e.currentTarget).attr('class')) {\n            case 'multiple-choice-button':\n                revisedSelection = MarkdownEditingDescriptor.insertMultipleChoice(selection);\n                break;\n            case 'string-button':\n                revisedSelection = MarkdownEditingDescriptor.insertStringInput(selection);\n                break;\n            case 'number-button':\n                revisedSelection = MarkdownEditingDescriptor.insertNumberInput(selection);\n                break;\n            case 'checks-button':\n                revisedSelection = MarkdownEditingDescriptor.insertCheckboxChoice(selection);\n                break;\n            case 'dropdown-button':\n                revisedSelection = MarkdownEditingDescriptor.insertSelect(selection);\n                break;\n            case 'header-button':\n                revisedSelection = MarkdownEditingDescriptor.insertHeader(selection);\n                break;\n            case 'explanation-button':\n                revisedSelection = MarkdownEditingDescriptor.insertExplanation(selection);\n                break;\n            default:\n                break;\n            }\n            if (revisedSelection !== null) {\n                this.markdown_editor.replaceSelection(revisedSelection);\n                this.markdown_editor.focus();\n            }\n        };\n\n        /*\n         Event listener for toggling cheatsheet (only possible when markdown editor is visible).\n         */\n        MarkdownEditingDescriptor.prototype.toggleCheatsheet = function(e) {\n            var that = this;\n            e.preventDefault();\n            if (!$(this.markdown_editor.getWrapperElement()).find('.simple-editor-cheatsheet')[0]) {\n                this.cheatsheet = $($('#simple-editor-cheatsheet').html());\n                $(this.markdown_editor.getWrapperElement()).append(this.cheatsheet);\n            }\n            this.toggleCheatsheetVisibility();\n            return setTimeout((function() {\n                return that.cheatsheet.toggleClass('shown');\n            }), 10);\n        };\n\n        /*\n         Function to toggle cheatsheet visibility.\n         */\n        MarkdownEditingDescriptor.prototype.toggleCheatsheetVisibility = function() {\n            return $('.modal-content').toggleClass('cheatsheet-is-shown');\n        };\n\n        /*\n         Stores the current editor and hides the one that is not displayed.\n         */\n        MarkdownEditingDescriptor.prototype.setCurrentEditor = function(editor) {\n            if (this.current_editor) {\n                $(this.current_editor.getWrapperElement()).hide();\n            }\n            this.current_editor = editor;\n            $(this.current_editor.getWrapperElement()).show();\n            return $(this.current_editor).focus();\n        };\n\n        /*\n         Called when save is called. Listeners are unregistered because editing the block again will\n         result in a new instance of the descriptor. Note that this is NOT the case for cancel--\n         when cancel is called the instance of the descriptor is reused if edit is selected again.\n         */\n        MarkdownEditingDescriptor.prototype.save = function() {\n            this.element.off('click', '.xml-tab', this.changeEditor);\n            this.element.off('click', '.format-buttons button', this.onToolbarButton);\n            this.element.off('click', '.cheatsheet-toggle', this.toggleCheatsheet);\n            if (this.current_editor === this.markdown_editor) {\n                return {\n                    data: MarkdownEditingDescriptor.markdownToXml(this.markdown_editor.getValue()),\n                    metadata: {\n                        markdown: this.markdown_editor.getValue()\n                    }\n                };\n            } else {\n                return {\n                    data: this.xml_editor.getValue(),\n                    nullout: ['markdown']\n                };\n            }\n        };\n\n        MarkdownEditingDescriptor.insertMultipleChoice = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericChoice(selectedText, '(', ')',\n                MarkdownEditingDescriptor.multipleChoiceTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertCheckboxChoice = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericChoice(selectedText, '[', ']',\n                MarkdownEditingDescriptor.checkboxChoiceTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertGenericChoice = function(selectedText, choiceStart, choiceEnd, template) {\n            var cleanSelectedText, line, lines, revisedLines, i, len;\n            if (selectedText.length > 0) {\n                // Replace adjacent newlines with a single newline, strip any trailing newline\n                cleanSelectedText = selectedText.replace(/\\n+/g, '\\n').replace(/\\n$/, '');\n                lines = cleanSelectedText.split('\\n');\n                revisedLines = '';\n                for (i = 0, len = lines.length; i < len; i++) {\n                    line = lines[i];\n                    revisedLines += choiceStart;\n                    // a stand alone x before other text implies that this option is \"correct\"\n                    if (/^\\s*x\\s+(\\S)/i.test(line)) {\n                        // Remove the x and any initial whitespace as long as there's more text on the line\n                        line = line.replace(/^\\s*x\\s+(\\S)/i, '$1');\n                        revisedLines += 'x';\n                    } else {\n                        revisedLines += ' ';\n                    }\n                    revisedLines += choiceEnd + ' ' + line + '\\n';\n                }\n                return revisedLines;\n            } else {\n                return template;\n            }\n        };\n\n        MarkdownEditingDescriptor.insertStringInput = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericInput(selectedText, '= ', '',\n                MarkdownEditingDescriptor.stringInputTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertNumberInput = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericInput(selectedText, '= ', '',\n                MarkdownEditingDescriptor.numberInputTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertSelect = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericInput(selectedText, '[[', ']]',\n                MarkdownEditingDescriptor.selectTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertHeader = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericInput(selectedText, '', '\\n====\\n',\n                MarkdownEditingDescriptor.headerTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertExplanation = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericInput(selectedText, '[explanation]\\n', '\\n[explanation]',\n                MarkdownEditingDescriptor.explanationTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertGenericInput = function(selectedText, lineStart, lineEnd, template) {\n            if (selectedText.length > 0) {\n                return lineStart + selectedText + lineEnd;\n            } else {\n                return template;\n            }\n        };\n\n        MarkdownEditingDescriptor.markdownToXml = function(markdown) {\n            var demandHintTags = [],\n                finalDemandHints, finalXml, responseTypesMarkdown, responseTypesXML, toXml;\n            toXml = function(partialMarkdown) {\n                var xml = partialMarkdown,\n                    i, splits, makeParagraph, serializer, responseType, $xml, responseTypesSelector,\n                    inputtype, beforeInputtype, extractHint, demandhints;\n                var responseTypes = [\n                    'optionresponse', 'multiplechoiceresponse', 'stringresponse', 'numericalresponse', 'choiceresponse'\n                ];\n\n                // fix DOS \\r\\n line endings to look like \\n\n                xml = xml.replace(/\\r\\n/g, '\\n');\n\n                // replace headers\n                xml = xml.replace(/(^.*?$)(?=\\n\\=\\=+$)/gm, '<h3 class=\"hd hd-2 problem-header\">$1</h3>');\n                xml = xml.replace(/\\n^\\=\\=+$/gm, '');\n\n                // extract question and description(optional)\n                // >>question||description<< converts to\n                // <label>question</label> <description>description</description>\n                xml = xml.replace(/>>([^]+?)<</gm, function(match, questionText) {\n                    var result = questionText.split('||'),\n                        label = '<label>' + result[0] + '</label>\\n';\n\n                    // don't add empty <description> tag\n                    if (result.length === 1 || !result[1]) {\n                        return label;\n                    }\n                    return label + '<description>' + result[1] + '</description>\\n';\n                });\n\n                // Pull out demand hints,  || a hint ||\n                demandhints = '';\n                xml = xml.replace(/(^\\s*\\|\\|.*?\\|\\|\\s*$\\n?)+/gm, function(match) {  // $\\n\n                    var inner,\n                        options = match.split('\\n');\n                    for (i = 0; i < options.length; i += 1) {\n                        inner = /\\s*\\|\\|(.*?)\\|\\|/.exec(options[i]);\n                        if (inner) {\n                            // xss-lint: disable=javascript-concat-html\n                            demandhints += '  <hint>' + inner[1].trim() + '</hint>\\n';\n                        }\n                    }\n                    return '';\n                });\n\n                // replace \\n+whitespace within extended hint {{ .. }}, by a space, so the whole\n                // hint sits on one line.\n                // This is the one instance of {{ ... }} matching that permits \\n\n                xml = xml.replace(/{{(.|\\n)*?}}/gm, function(match) {\n                    return match.replace(/\\r?\\n( |\\t)*/g, ' ');\n                });\n\n                // Function used in many places to extract {{ label:: a hint }}.\n                // Returns a little hash with various parts of the hint:\n                // hint: the hint or empty, nothint: the rest\n                // labelassign: javascript assignment of label attribute, or empty\n                extractHint = function(inputText, detectParens) {\n                    var text = inputText,\n                        curly = /\\s*{{(.*?)}}/.exec(text),\n                        hint = '',\n                        label = '',\n                        parens = false,\n                        labelassign = '',\n                        labelmatch;\n                    if (curly) {\n                        text = text.replace(curly[0], '');\n                        hint = curly[1].trim();\n                        labelmatch = /^(.*?)::/.exec(hint);\n                        if (labelmatch) {\n                            hint = hint.replace(labelmatch[0], '').trim();\n                            label = labelmatch[1].trim();\n                            labelassign = ' label=\"' + label + '\"';\n                        }\n                    }\n                    if (detectParens) {\n                        if (text.length >= 2 && text[0] === '(' && text[text.length - 1] === ')') {\n                            text = text.substring(1, text.length - 1);\n                            parens = true;\n                        }\n                    }\n                    return {\n                        nothint: text,\n                        hint: hint,\n                        label: label,\n                        parens: parens,\n                        labelassign: labelassign\n                    };\n                };\n\n\n                // replace selects\n                // [[ a, b, (c) ]]\n                // [[\n                //     a\n                //     b\n                //     (c)\n                //  ]]\n                // <optionresponse>\n                //  <optioninput>\n                //     <option  correct=\"True\">AAA<optionhint  label=\"Good Job\">\n                //          Yes, multiple choice is the right answer.\n                //  </optionhint>\n                // Note: part of the option-response syntax looks like multiple-choice, so it must be processed first.\n                xml = xml.replace(/\\[\\[((.|\\n)+?)\\]\\]/g, function(match, group1) {\n                    var textHint, options, optiontag, correct, lines, optionlines, line, correctstr, hintstr, label;\n                    // decide if this is old style or new style\n                    if (match.indexOf('\\n') === -1) {  // OLD style, [[ .... ]]  on one line\n                        options = group1.split(/\\,\\s*/g);\n                        optiontag = '  <optioninput options=\"(';\n                        for (i = 0; i < options.length; i += 1) {\n                            optiontag += \"'\" + options[i].replace(/(?:^|,)\\s*\\((.*?)\\)\\s*(?:$|,)/g, '$1') + \"'\" +\n                                (i < options.length - 1 ? ',' : '');\n                        }\n                        optiontag += ')\" correct=\"';\n                        correct = /(?:^|,)\\s*\\((.*?)\\)\\s*(?:$|,)/g.exec(group1);\n                        if (correct) {\n                            optiontag += correct[1];\n                        }\n                        optiontag += '\">';\n                        return '\\n<optionresponse>\\n' + optiontag + '</optioninput>\\n</optionresponse>\\n\\n';\n                    }\n\n                    // new style  [[ many-lines ]]\n                    lines = group1.split('\\n');\n                    optionlines = '';\n                    for (i = 0; i < lines.length; i++) {\n                        line = lines[i].trim();\n                        if (line.length > 0) {\n                            textHint = extractHint(line, true);\n                            correctstr = ' correct=\"' + (textHint.parens ? 'True' : 'False') + '\"';\n                            hintstr = '';\n                            if (textHint.hint) {\n                                label = textHint.label;\n                                if (label) {\n                                    label = ' label=\"' + label + '\"';\n                                }\n                                hintstr = ' <optionhint' + label + '>' + textHint.hint + '</optionhint>';\n                            }\n                            optionlines += '    <option' + correctstr + '>' + textHint.nothint + hintstr +\n                                '</option>\\n';\n                        }\n                    }\n                    return '\\n<optionresponse>\\n  <optioninput>\\n' + optionlines +\n                        '  </optioninput>\\n</optionresponse>\\n\\n';\n                });\n\n                // multiple choice questions\n                //\n                xml = xml.replace(/(^\\s*\\(.{0,3}\\).*?$\\n*)+/gm, function(match) {\n                    var choices = '',\n                        shuffle = false,\n                        options = match.split('\\n'),\n                        value, inparens, correct,\n                        fixed, hint, result;\n                    for (i = 0; i < options.length; i++) {\n                        options[i] = options[i].trim();                   // trim off leading/trailing whitespace\n                        if (options[i].length > 0) {\n                            value = options[i].split(/^\\s*\\(.{0,3}\\)\\s*/)[1];\n                            inparens = /^\\s*\\((.{0,3})\\)\\s*/.exec(options[i])[1];\n                            correct = /x/i.test(inparens);\n                            fixed = '';\n                            if (/@/.test(inparens)) {\n                                fixed = ' fixed=\"true\"';\n                            }\n                            if (/!/.test(inparens)) {\n                                shuffle = true;\n                            }\n\n                            hint = extractHint(value);\n                            if (hint.hint) {\n                                value = hint.nothint;\n                                value = value + ' <choicehint' + hint.labelassign + '>' + hint.hint + '</choicehint>';\n                            }\n                            choices += '    <choice correct=\"' + correct + '\"' + fixed + '>' + value + '</choice>\\n';\n                        }\n                    }\n                    result = '<multiplechoiceresponse>\\n';\n                    if (shuffle) {\n                        result += '  <choicegroup type=\"MultipleChoice\" shuffle=\"true\">\\n';\n                    } else {\n                        result += '  <choicegroup type=\"MultipleChoice\">\\n';\n                    }\n                    result += choices;\n                    result += '  </choicegroup>\\n';\n                    result += '</multiplechoiceresponse>\\n\\n';\n                    return result;\n                });\n\n                // group check answers\n                // [.] with {{...}} lines mixed in\n                xml = xml.replace(/(^\\s*((\\[.?\\])|({{.*?}})).*?$\\n*)+/gm, function(match) {\n                    var groupString = '<choiceresponse>\\n',\n                        options = match.split('\\n'),\n                        value, correct, abhint, endHints, hintbody,\n                        hint, inner, select, hints;\n\n                    groupString += '  <checkboxgroup>\\n';\n                    endHints = '';  // save these up to emit at the end\n\n                    for (i = 0; i < options.length; i += 1) {\n                        if (options[i].trim().length > 0) {\n                            // detect the {{ ((A*B)) ...}} case first\n                            // emits: <compoundhint value=\"A*B\">AB hint</compoundhint>\n\n                            abhint = /^\\s*{{\\s*\\(\\((.*?)\\)\\)(.*?)}}/.exec(options[i]);\n                            if (abhint) {\n                                // lone case of hint text processing outside of extractHint, since syntax here is unique\n                                hintbody = abhint[2];\n                                hintbody = hintbody.replace('&lf;', '\\n').trim();\n                                endHints += '    <compoundhint value=\"' + abhint[1].trim() + '\">' + hintbody +\n                                    '</compoundhint>\\n';\n                                continue;  // bail\n                            }\n\n                            value = options[i].split(/^\\s*\\[.?\\]\\s*/)[1];\n                            correct = /^\\s*\\[x\\]/i.test(options[i]);\n                            hints = '';\n                            //  {{ selected: You’re right that apple is a fruit. },\n                            //   {unselected: Remember that apple is also a fruit.}}\n                            hint = extractHint(value);\n                            if (hint.hint) {\n                                inner = '{' + hint.hint + '}';  // parsing is easier if we put outer { } back\n\n                                // include \\n since we are downstream of extractHint()\n                                select = /{\\s*(s|selected):((.|\\n)*?)}/i.exec(inner);\n                                // checkbox choicehints get their own line, since there can be two of them\n                                // <choicehint selected=\"true\">You’re right that apple is a fruit.</choicehint>\n                                if (select) {\n                                    hints += '\\n      <choicehint selected=\"true\">' + select[2].trim() +\n                                        '</choicehint>';\n                                }\n                                select = /{\\s*(u|unselected):((.|\\n)*?)}/i.exec(inner);\n                                if (select) {\n                                    hints += '\\n      <choicehint selected=\"false\">' + select[2].trim() +\n                                        '</choicehint>';\n                                }\n\n                                // Blank out the original text only if the specific \"selected\" syntax is found\n                                // That way, if the user types it wrong, at least they can see it's not processed.\n                                if (hints) {\n                                    value = hint.nothint;\n                                }\n                            }\n                            groupString += '    <choice correct=\"' + correct + '\">' + value + hints + '</choice>\\n';\n                        }\n                    }\n\n                    groupString += endHints;\n                    groupString += '  </checkboxgroup>\\n';\n                    groupString += '</choiceresponse>\\n\\n';\n\n                    return groupString;\n                });\n\n\n                // replace string and numerical, numericalresponse, stringresponse\n                // A fine example of the function-composition programming style.\n                xml = xml.replace(/(^s?\\=\\s*(.*?$)(\\n*(or|not)\\=\\s*(.*?$))*)+/gm, function(match, p) {\n                    // Line split here, trim off leading xxx= in each function\n                    var answersList = p.split('\\n'),\n\n                        isRangeToleranceCase = function(answer) {\n                            return _.contains(\n                                ['[', '('], answer[0]) && _.contains([']', ')'], answer[answer.length - 1]\n                            );\n                        },\n\n                        getAnswerData = function(answerValue) {\n                            var answerData = {},\n                                answerParams = /(.*?)\\+\\-\\s*(.*?$)/.exec(answerValue);\n                            if (answerParams) {\n                                answerData.answer = answerParams[1].replace(/\\s+/g, ''); // inputs like 5*2 +- 10\n                                answerData.default = answerParams[2];\n                            } else {\n                                answerData.answer = answerValue.replace(/\\s+/g, ''); // inputs like 5*2\n                            }\n                            return answerData;\n                        },\n\n                        processNumericalResponse = function(answerValues) {\n                            var firstAnswer, answerData, numericalResponseString, additionalAnswerString,\n                                textHint, hintLine, additionalTextHint, additionalHintLine, orMatch, hasTolerance;\n\n                            // First string case is s?= [e.g. = 100]\n                            firstAnswer = answerValues[0].replace(/^\\=\\s*/, '');\n\n                            // If answer is not numerical\n                            if (isNaN(parseFloat(firstAnswer)) && !isRangeToleranceCase(firstAnswer)) {\n                                return false;\n                            }\n\n                            textHint = extractHint(firstAnswer);\n                            hintLine = '';\n                            if (textHint.hint) {\n                                firstAnswer = textHint.nothint;\n                                // xss-lint: disable=javascript-concat-html\n                                hintLine = '  <correcthint' + textHint.labelassign + '>' +\n                                // xss-lint: disable=javascript-concat-html\n                                    textHint.hint + '</correcthint>\\n';\n                            }\n\n                            // Range case\n                            if (isRangeToleranceCase(firstAnswer)) {\n                                // [5, 7) or (5, 7), or (1.2345 * (2+3), 7*4 ]  - range tolerance case\n                                // = (5*2)*3 should not be used as range tolerance\n                                // xss-lint: disable=javascript-concat-html\n                                numericalResponseString = '<numericalresponse answer=\"' + firstAnswer + '\">\\n';\n                            } else {\n                                answerData = getAnswerData(firstAnswer);\n                                // xss-lint: disable=javascript-concat-html\n                                numericalResponseString = '<numericalresponse answer=\"' + answerData.answer + '\">\\n';\n                                if (answerData.default) {\n                                    // xss-lint: disable=javascript-concat-html\n                                    numericalResponseString += '  <responseparam type=\"tolerance\" default=\"' +\n                                    // xss-lint: disable=javascript-concat-html\n                                        answerData.default + '\" />\\n';\n                                }\n                            }\n\n                            // Additional answer case or= [e.g. or= 10]\n                            // Since answerValues[0] is firstAnswer, so we will not include this in additional answers.\n                            additionalAnswerString = '';\n                            for (i = 1; i < answerValues.length; i++) {\n                                additionalHintLine = '';\n                                additionalTextHint = extractHint(answerValues[i]);\n                                orMatch = /^or\\=\\s*(.*)/.exec(additionalTextHint.nothint);\n                                if (orMatch) {\n                                    hasTolerance = /(.*?)\\+\\-\\s*(.*?$)/.exec(orMatch[1]);\n                                    // Do not add additional_answer if additional answer is not numerical (eg. or= ABC)\n                                    // or contains range tolerance case (eg. or= (5,7)\n                                    // or has tolerance (eg. or= 10 +- 0.02)\n                                    if (isNaN(parseFloat(orMatch[1])) ||\n                                        isRangeToleranceCase(orMatch[1]) ||\n                                        hasTolerance) {\n                                        continue;\n                                    }\n\n                                    if (additionalTextHint.hint) {\n                                        // xss-lint: disable=javascript-concat-html\n                                        additionalHintLine = '<correcthint' +\n                                            // xss-lint: disable=javascript-concat-html\n                                            additionalTextHint.labelassign + '>' +\n                                            // xss-lint: disable=javascript-concat-html\n                                            additionalTextHint.hint + '</correcthint>';\n                                    }\n\n                                    // xss-lint: disable=javascript-concat-html\n                                    additionalAnswerString += '  <additional_answer answer=\"' + orMatch[1] + '\">';\n                                    additionalAnswerString += additionalHintLine;\n                                    additionalAnswerString += '</additional_answer>\\n';\n                                }\n                            }\n\n                            // Add additional answers string to numerical problem string.\n                            if (additionalAnswerString) {\n                                numericalResponseString += additionalAnswerString;\n                            }\n\n                            numericalResponseString += '  <formulaequationinput />\\n';\n                            numericalResponseString += hintLine;\n                            numericalResponseString += '</numericalresponse>\\n\\n';\n\n                            return numericalResponseString;\n                        },\n\n                        processStringResponse = function(values) {\n                            var firstAnswer, textHint, typ, string, orMatch, notMatch;\n                            // First string case is s?=\n                            firstAnswer = values.shift();\n                            firstAnswer = firstAnswer.replace(/^s?\\=\\s*/, '');\n                            textHint = extractHint(firstAnswer);\n                            firstAnswer = textHint.nothint;\n                            typ = ' type=\"ci\"';\n                            if (firstAnswer[0] === '|') { // this is regexp case\n                                typ = ' type=\"ci regexp\"';\n                                firstAnswer = firstAnswer.slice(1).trim();\n                            }\n                            string = '<stringresponse answer=\"' + firstAnswer + '\"' + typ + ' >\\n';\n                            if (textHint.hint) {\n                                string += '  <correcthint' + textHint.labelassign + '>' +\n                                    textHint.hint + '</correcthint>\\n';\n                            }\n\n                            // Subsequent cases are not= or or=\n                            for (i = 0; i < values.length; i += 1) {\n                                textHint = extractHint(values[i]);\n                                notMatch = /^not\\=\\s*(.*)/.exec(textHint.nothint);\n                                if (notMatch) {\n                                    string += '  <stringequalhint answer=\"' + notMatch[1] + '\"' +\n                                        textHint.labelassign + '>' + textHint.hint + '</stringequalhint>\\n';\n                                    continue;\n                                }\n                                orMatch = /^or\\=\\s*(.*)/.exec(textHint.nothint);\n                                if (orMatch) {\n                                    // additional_answer with answer= attribute\n                                    string += '  <additional_answer answer=\"' + orMatch[1] + '\">';\n                                    if (textHint.hint) {\n                                        string += '<correcthint' + textHint.labelassign + '>' +\n                                            textHint.hint + '</correcthint>';\n                                    }\n                                    string += '</additional_answer>\\n';\n                                }\n                            }\n\n                            string += '  <textline size=\"20\"/>\\n</stringresponse>\\n\\n';\n\n                            return string;\n                        };\n\n                    return processNumericalResponse(answersList) || processStringResponse(answersList);\n                });\n\n\n                // replace explanations\n                xml = xml.replace(/\\[explanation\\]\\n?([^\\]]*)\\[\\/?explanation\\]/gmi, function(match, p1) {\n                    return '<solution>\\n<div class=\"detailed-solution\">\\n' +\n                        gettext('Explanation') + '\\n\\n' + p1 + '\\n</div>\\n</solution>';\n                });\n\n                // replace code blocks\n                xml = xml.replace(/\\[code\\]\\n?([^\\]]*)\\[\\/?code\\]/gmi, function(match, p1) {\n                    return '<pre><code>' + p1 + '</code></pre>';\n                });\n\n                // split scripts and preformatted sections, and wrap paragraphs\n                splits = xml.split(/(\\<\\/?(?:script|pre|label|description).*?\\>)/g);\n\n                // Wrap a string by <p> tag when line is not already wrapped by another tag\n                // true when line is not already wrapped by another tag false otherwise\n                makeParagraph = true;\n\n                for (i = 0; i < splits.length; i += 1) {\n                    if (/\\<(script|pre|label|description)/.test(splits[i])) {\n                        makeParagraph = false;\n                    }\n\n                    if (makeParagraph) {\n                        splits[i] = splits[i].replace(/(^(?!\\s*\\<|$).*$)/gm, '<p>$1</p>');\n                    }\n\n                    if (/\\<\\/(script|pre|label|description)/.test(splits[i])) {\n                        makeParagraph = true;\n                    }\n                }\n\n                xml = splits.join('');\n\n                // rid white space\n                xml = xml.replace(/\\n\\n\\n/g, '\\n');\n\n                // if we've come across demand hints, wrap in <demandhint> at the end\n                if (demandhints) {\n                    demandHintTags.push(demandhints);\n                }\n\n                // make selector to search responsetypes in xml\n                responseTypesSelector = responseTypes.join(', ');\n\n                // make temporary xml\n                // xss-lint: disable=javascript-concat-html\n                $xml = $($.parseXML('<prob>' + xml + '</prob>'));\n                responseType = $xml.find(responseTypesSelector);\n\n                // convert if there is only one responsetype\n                if (responseType.length === 1) {\n                    inputtype = responseType[0].firstElementChild;\n                    // used to decide whether an element should be placed before or after an inputtype\n                    beforeInputtype = true;\n\n                    _.each($xml.find('prob').children(), function(child) {\n                        // we don't want to add the responsetype again into new xml\n                        if (responseType[0].nodeName === child.nodeName) {\n                            beforeInputtype = false;\n                            return;\n                        }\n\n                        if (beforeInputtype) {\n                            // xss-lint: disable=javascript-jquery-insert-into-target\n                            responseType[0].insertBefore(child, inputtype);\n                        } else {\n                            responseType[0].appendChild(child);\n                        }\n                    });\n                    serializer = new XMLSerializer();\n\n                    xml = serializer.serializeToString(responseType[0]);\n\n                    // remove xmlns attribute added by the serializer\n                    xml = xml.replace(/\\sxmlns=['\"].*?['\"]/gi, '');\n\n                    // XMLSerializer messes the indentation of XML so add newline\n                    // at the end of each ending tag to make the xml looks better\n                    xml = xml.replace(/(\\<\\/.*?\\>)(\\<.*?\\>)/gi, '$1\\n$2');\n                }\n\n                // remove class attribute added on <p> tag for question title\n                xml = xml.replace(/\\sclass=\\'qtitle\\'/gi, '');\n                return xml;\n            };\n            responseTypesXML = [];\n            responseTypesMarkdown = markdown.split(/\\n\\s*---\\s*\\n/g);\n            _.each(responseTypesMarkdown, function(responseTypeMarkdown) {\n                if (responseTypeMarkdown.trim().length > 0) {\n                    responseTypesXML.push(toXml(responseTypeMarkdown));\n                }\n            });\n            finalDemandHints = '';\n            if (demandHintTags.length) {\n                // xss-lint: disable=javascript-concat-html\n                finalDemandHints = '\\n<demandhint>\\n' + demandHintTags.join('') + '</demandhint>';\n            }\n            // make all responsetypes descendants of a single problem element\n            // xss-lint: disable=javascript-concat-html\n            finalXml = '<problem>\\n' + responseTypesXML.join('\\n\\n') + finalDemandHints + '\\n</problem>';\n            return finalXml;\n        };\n\n        return MarkdownEditingDescriptor;\n    }(XModule.Descriptor));\n}).call(this);\n\n}.call(window));\n\n\n// WEBPACK FOOTER //\n// ./common/static/xmodule/descriptors/js/001-091f58dd32678373423e4deae364e9dd.js","(function() { module.exports = window[\"jQuery\"]; }());\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 0\n// module chunks = 3 4 5 6 9 10 11 13 14 15 16 17 18 19 20 21 23 24 25 26 27 28 29 30 31 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 84","(function() { module.exports = window[\"_\"]; }());\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"_\"\n// module id = 1\n// module chunks = 3 4 5 6 9 10 11 14 15 16 18 19 20 21 23 24 25 26 27 28 29 30 31 34 35 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75"],"sourceRoot":""}